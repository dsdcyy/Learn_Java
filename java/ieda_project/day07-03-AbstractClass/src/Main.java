public class Main {
    public static void main(String[] args) {
        // 当父类的某些方法，需要声明，但是又不确定如何实现时，可以将其声明为抽象方法，那么这个类就是抽象类

        // 解决之道-抽象类快速入门
        /*
        * 当父类的一些方法不能确定时，可以用abstract关键字来修饰该方法，这个方法
        × 就是抽象方法，用abstract来修饰该类就是抽象类。
        * */

        // 抽象类的介绍
        /*
        * 1.用abstract关键字来修饰一个类时，这个类就叫抽象类
        * 访问修饰符 abstract 类名
        * 2.用abstract关键字来修饰一个方法时，这个方法就是抽象方法
        * 访问修饰符abstract返回类型方法名（参数列表）：//没有方法体
        * 3.抽象类的价值更多作用是在于设计，是设计者设计好后，让子类继承并实现抽象类
        * 4.抽象类，是考官比较爱问的知识点，在框架和设计模式使用较多*/

        // 抽象类使用的注意事项和细节讨论 AbstractDetail01.java
        /*
        * 1.抽象类不能被实例化【举例]
        * 2.抽象类不一定要包含abstract方法。也就是说，抽象类可以没有abstract方法【举例]
        * 3.一旦类包含了abstract方法，则这个类必须声明为abstract【说明]
        * 4.abstract只能修饰类和方法，不能修饰属性和其它的。[说明]
        * 5.抽象类可以有任意成员【抽象类还是类】，比如：非抽象方法、构造器、静态属性等等【举例]
        * 6.抽象方法不能有主体，即不能实现
        * 7.如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己也声明为abstract类
        * 8.抽象方法不能使用private，final和static修饰，因为这些都与重写违背
        * */

        // 抽象类最佳实践-模板设计模式

        // 需求
        /*
        * 1.有多个类，完成不同的任务job
        * 2.要求能够得到各自完成任务的时间
        * 3.编程实现
        * */

        // 感情的自然流露
        /*
        * 1.先用最容易想到的方法
        * 2.分析问题，提出使用模板设计模式
        * */

        // 最佳实践 TemplateDesignPattern.java
        /*
        * 设计一个抽象类（Template)，能完成如下功能：
        * 1.编写方法calculateTime0，可以计算某段代码的耗时时间
        * 2.编写抽象方法job()
        * 3.编写一个子类Sub.继承抽象类Template，并实现job方法
        * 4.编写一个测试类TestTemplate.看看是否好用
        * */
        System.out.println("Hello world!");
    }
}