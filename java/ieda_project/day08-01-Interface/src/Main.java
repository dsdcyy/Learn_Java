public class Main {
    public static void main(String[] args) {
        // 接口

        // 基本介绍
        /*
        * 接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，在根据具体情况把这些方法写出来，语法：
        * interface 接口名{
        * // 属性
        * // 方法
        * }
        * class 类名 implements 接口{
        * // 自己属性
        * // 自己方法
        * // 必须实现接口的抽象方法
        * }
        */

        // 小结
        /*
        * 1.在Jdk7.0前接口里的所有方法都没有方法体
        * 2.Jdk8.0后接口类可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现，
        * 默认方法需要用default关键字进行修饰
        *
        *   */

        // 注意事项和细节 InterfaceDetail01.java
        /*
        * 1.接口不能被实例化
        * 2.接口中所有的方法是public方法,接口中抽象方法，可以不用abstract修饰
        * 3.一个普通类实现接口，就必须将该接口的所有方法都实现
        * 4.抽象类实现接口，可以不用实现接口的方法
        * InterfaceDetail02.java
        * 5.一个类同时可以实现多个接口
        * 6.接口中的属性，只能是final的，而且是public static final修饰符
        * 比如：int a=1；实际上是public static final int a = 1；(必须初始化)
        * 7.接口中属性的访问形式：接口名.属性名
        * 8.一个接口不能继承其它的类，但是可以继承多个别的接口
        * 9.接口的修饰符只能是public和默认，这点和类的修饰符是一样的
        * */

        // 实现接口VS继承类
        /*
        * 1.接口和继承解决的问题不同
        * 继承的价值主要在于：解决代码的复用性和可维护性
        * 接口的价值主要在于：设计，设计好各种规范(方法)，让其它类去实现这些方法。即更加的灵活
        * 2.接口比继承更加灵活
        * 接口比继承更加灵活，继承是满足is-a的关系，而接口只需满足like-a的关系
        * 接口在一定程度上实现代码解耦 [接口规范性和动态绑定机制]
        * */

        // 接口的多态特性
        /*
        * 1.多态参数（前面案例体现）InterfacePolyParameter.java
        * 在前面的Usb接口案例，Usb，既可以接收手机对象，又可以接收相机对象，就体现了接口
        * 多态(接口引用可以指向实现了接口的类的对象）
        * 2.多态数组InterfacePolyArr.java
        * 演示一个案例：给Usb数组中，存放Phone和相机对象，Phone类还有一个特有的方法call(),
        * 请遍历Usb数组，如果是Phone对象，除了调用Usb接口定义的方法外，还需要调用Phone特有方法call.
        * 3.接口存在多态传递现象 InterfacePolyPass.java
        * */
        System.out.println("Hello world!");
    }
}