public class Main {
    public static void main(String[] args) {
        // 什么是单例设计模式
        /*
        * 1.静态方法和属性经典使用
        * 2.设计模式是在大量的实践中总结和理论优化之后优选的代码结构，编程风格
        * 以及解决问题的思考方式。设计模式就是经典的棋谱，不同的棋局，
        * 我们用不同的棋谱，免去我们再思考和摸索
        * */

        // 什么是单例模式
        /*
        * 单例(单个的示例)
        * 1.所谓类的单例模式设计，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，
        * 并且该类只提供一个取得其对象实例的方法
        * 2.单例模式有两种方法 （1）饿汉式 （2）懒汉式
        * */

        // 饱汉式和懒汉式单例模式的实现
        /*
        * 步骤如下：
        * 1.构造器私有化 => 防止直接 new
        * 2.类的内部创建对象
        * 3.向外暴露出一个静态的公共方法
        * 4.代码实现  Singleton.java
        * */

        // 饿汉式vs懒汉式
        /*
        * 1.二者最主要的区别在于创建对象的时机不同，饿汉式是类加载就创建了实例，而懒汉式是在使用时才创建
        * 2.饿汉式不存在线程安全问题，兰汉式存在线程安全
        * 3.饿汉式存在浪费资源的可能，因为如果程序员一个对象实例都没有使用，那么饿汉式创建的对象就浪费了，
        * 懒汉式使用时才创建，就不存在这个问题
        * 4.在我们javaSE标准类中，java.lang.Runtime就是经典的单例模式
        *  */
        System.out.println("Hello world!");
    }
}