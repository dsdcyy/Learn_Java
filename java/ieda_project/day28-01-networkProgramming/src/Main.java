/**
 * @author ljw
 * @version 1.0
 */
public class Main {
    public static void main(String[] args) {
        // 网络编程

        // 网络通讯
        /*
        * 1.概念：两台设备之间通过网络实现数据传输
        * 2.网络通信：将数据通过网络从一台设备传输到另一台设备
        * 3.java.net包下提供了一系列的类或接口，供程序员使用，完成网络通信
        * */

        // 网络
        /*
        * 1.概念：两台或多台设备通过一定物理设备连接起来构成了网络
        * 2.根据网络的覆盖范围不同，对网络进行分类：
            局域网：覆盖范围最小，仅仅覆盖一个教室或一个机房
            城域网：覆盖范围较大，可以覆盖一个城市
            广域网：覆盖范围最大，可以覆盖全国，甚至全球，万维网是广域网的代表
        * */
        // ip地址
        /*
        * 1.概念：用于唯一标识网络中的每台计算机
        * 2.查看ip地址：ipconfig(windows) ifconfig(linux)
        * 3.ip地址的表示形式：点分十进制xxx.xxx.xxx.xxx
        * 4.每一个十进制数的范围：0~255
        * 5.ip地址的组成=网络地址+主机地址，比如：192.168.16.69
        * 6.IPv6是互联网工程任务组设计的用于替代IPv4的下一代IP协议，其地址数量号称可以为全世界的每一粒沙子编上一个地址
        * 7.由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，
            而且也解决了多种接入设备连入互联韩的障碍
        * */
        // 域名
        /*
        * 1.www.baidu.com
        * 2.好处：为了方便记忆，解决记ip的困难
        * 3.概念：将ip地址映射成域名
        * */
        // 端口号
        /*
        * 1.概念：用于标识计算机上某个特定的网络程序
        * 2.表示形式：以整数形式，范围0~65535
        * 3.0~1024已经被占用，比如ssh22，ftp21，smtp25http80
        * 4.常见的网络程序端口号：
            tomcat:8080
            mysql：3306
            oracle:1521
            sqlserver：1433
        * */
        // 网络通信协议
        // 协议(tcp/ip)
        //TCP/IP
        //(Transmission ControlProtocol/InternetProtocol的简写
        //中文译名为传输控制协议/因特网互联协议，又叫网络通讯协议，这个协议是
        //Internet最基本的协议、Internet国际互联网络的基础，简单地说，
        // 就是由网络层的IP协议和传输层的TCP协议组成的

        // 数据的组织形式就是协议

        // TCP和UDP
        // TCP协议
        /*
        * 1.使用TCP协议前，须先建立TCP连接，形成传输数据通道
        * 2.传输前，采用"三次握手"方式，是可靠的
        * 3.TCP协议进行通信的两个应用进程：客户端、服务端
        * 4.在连接中可进行大数据量的传输
        * 5.传输完毕，需释放已建立的连接，效率低
        */
        // UDP协议
        /*
        * 1.将数据、源、目的封装成数据包，不需要建立连接
        * 2.每个数据报的大小限制在64K内
        * 3.因无需连接，故是不可靠的
        * 4.发送数据结束时无需释放资源(因为不是面向连接的），速度快
        * 5.举例：厕所通知：发短信
        * */

        //InetAddress类
        //相关方法
        /*
        * 1.获取本机InetAddress对象getLocalHost
        * 2.根据指定主机名/域名获取ip地址对象getByName
        * 3.获取lnetAddress对象的主机名getHostName
        * 4.获取InetAddress对象的地址getHostAddress
        * */
        // Socket
        //基本介绍
        /*
        * 1.套接字（Socket)开发网络应用程序被广泛采用，以至于成为事实上的标准
        * 2.通信的两端都要有Socket，是两台机器间通信的端点
        * 3.网络通信其实就是Socket的通信。
        * 4.Socket允许程序把网络连接当成一个流，数据在两个Socket间通过I0传输
        * 5.一般主动发起通信的应用程序属客户端，等待通信请求的为服务端
        * */
        // TCP网络通信编程
        // 基本介绍
        /*
        * 1.基于客户端一服务端的网络通信
        * 2.底层使用的是TCP/IP协议
        * 3.应用场景举例：客户端发送数据，服务端接受并显示
        * 4.基于Socket的TCP编程
        * */
        // 应用案例
        /*
        * 应用案例1（使用字节流）
        com.ljw.socket SocketTCP01Server.java 服务端 SocketTcP01Client.java 客户端
        * 1.编写一个服务器端，和一个客户端
        * 2.服务器端在9999端口监听
        * 3.客户端连接到服务器端，发送"hello，server"，然后退出
        * 4.服务器端接收到客户端发送的信息，输出，并退出
        *
        * 应用案例2（使用字节流)
        * 1.编写一个服务器端，和一个客户端
        * 2.服务器端在9999端口监听
        * 3.客户端连接到服务器端，发送"hello，server"，并接收服务器端回发的"hello,client”再退出
        * 4.服务器端接收到客户端发送的信息，输出，并发送"hello.client"，再退出
        *
        * 应用案例3（使用字符流）
        * com.ljw.socket SocketTCP02Server.java 服务端 SocketTcP02Client.java 客户端
        * 1.编写一个服务端，和一个客户端
        * 2.服务端在9999端口监听
        * 3.客户端连接到服务端，发送"hello，server"，并接收服务端回发的"hello，clint
        * 4.服务端接收到客户端发送的信息，输出，并发送"hello，client"，再退出
        *
        * 应用案例4
        * com.ljw.socket SocketTCP03Server.java 服务端 SocketTcP03Client.java 客户端
        * 1.编写一个服务端，和一个客户端
        * 2.服务器端在9999端口监听
        * 3.客户端连接到服务端，发送一张图片e:llqie.png
        * 4.服务器端接收到客户端发送的图片，保存到src下，发送“收到图片”再退出
        * 5.客户端接收到服务端发送的“收到图片"，再退出
        * 6.该程序要求使用StreamUtils.java
        * */

        // netstat 指令
        /*
        * 1.netstat-an可以查看当前主机网络情况，包括端口监听情况和网络连接情况
        * 2.netstat-an|more可以分页显示
        * 3.要求在dos控制台下执行
        * 说明：
        * 1.Listening表示某个端口=在监听状态
        * 2.如果有一个外部程序(客户端)连接该端口，就会显示一条连接信息
        * */

        // tcp网络通信不为人知的秘密
        /*
        * 1.当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的，这个端口是TCP/IP来分配的，是不确定的，是随机的
        * */

        // UDP网络通信编程[了解]
        // 基本介绍
        /*
        * 1.类DatagramSocket和DatagramPacket实现了基于UDP协议网络程序。
        * 2.UDP数据报通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到自的地，也不能确定什么时候可以抵达。
        * 3.DatagramPacket对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。
        * 4.UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接
        * */
        // 基本流程
        /*
        * 1.核心的两个类/对象DatagramSocket与DatagramPacket
        * 2.建立发送端，接收端
        * 3.建立数据包
        * 4.调用DatagramSocket的发送、接收方法
        * 5.关闭DatagramSocket
        * */

        // UDP说明
        /*
        * 1.没有明确的服务端和客户端，演变成数据的发送端和接收端
        * 2.接收数据和发送数据是通过DatagramSocket对象完成
        * 3.将数据封装到DatagramPacket对象/装包
        * 4.当接收到DatagramPacket 对象，需要进行拆包，取出数据
        * 5.DatagramSocket可以指定在哪个端口接收数据
        * */
        System.out.println("Hello world!");

        // 应用案例
        /*
        * com.ljw.udp包 UDPReceiverA.java UDPSenderB.java

        * */
    }
}