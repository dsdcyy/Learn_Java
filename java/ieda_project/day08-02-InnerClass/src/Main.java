public class Main {
    public static void main(String[] args) {
        // 内部类

        // 基本介绍
        /*
        * 一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（innerclass)
        * 嵌套其他类的类称为外部类（outerClass)。是我们类的第五大成员【思考：类的五大
        * 成员是哪些20】，内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系
        * */

        // 基本语法
        /*
        * class Outer{ // 外部类
        *   class Inner{}; // 内部类
        * }
        * */

        // 内部类的分类
        /*
        * 定义在外部类局部位置上（比如方法内）：
        * 1.局部内部类（有类名）
        * 2.匿名内部类（没有类名，重点）
        * 定义在外部类的成员位置上：
        * 成员内部类（没用static修饰）
        * 静态内部类（使用static修饰）
        * */

        // 局部内部类的使用 LocalInnerClass.java
        // 说明：局部内部类是定义在外部类的局部位置，比如方法中，并且有类名。
        /*
        * 1.可以直接访问外部类的所有成员，包含私有的
        * 2.不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用
            修饰符的。但是可以使用final修饰，因为局部变量也可以使用final
        * 3.作用域：仅仅在定义它的方法或代码块中。
        * 4.局部内部类---访问---->外部类的成员【访问方式：直接访问]
        * 5.外部类---访问---->局部内部类的成员
        * 访问方式：创建对象，再访问（注意：必须在作用域内）
        * 6.外部其他类---不能访问----->局部内部类（因为局部内部类地位是一个局部变量）
        * 7.如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成
        * 员，则可以使用（外部类名.this.成员）去访问【演示】 System.out.println（外部类的n2="+外部类名.this.n2）；
        * */

        // 匿名内部类的使用（重要！!!）
        // 1.本质是类 2.内部类 3.该类没有名字 4.还是个对象
        // 说明：匿名内部类是定义在外部类的局部位置，比如方法中，并且没有类名
        /*
        * 1.名内部类的基本语法
        * new类或接口（参数列表）{
        * 类体
        * }
        * 【案例演示AnonymousInnerClass.java】
        *
        * 2.匿名内部类的语法比较奇特，请大家注意，因为匿名内部类既是一个类的定义，
        * 同时它本身也是一个对象，因此从语法上看，它既有定义类的特征，也有创建
        * 对象的特征，对前面代码分析可以看出这个特点，因此可以调用圈名内部类方法
        * AnonymousInnerDetail.java
        * 3.可以直接访问外部类的所有成员，包含私有的【案例演示]
        * 4.不能添加访问修饰符，因为它的地位就是一个局部变量
        * 5.作用域：仅仅在定义它的方法或代码块中
        * 6.匿名内部类---访问---->外部类成员
        * 7.外部其他类---不能访问----->圈名内部类因为暨名内部类地位是一个局部变量）
        * 8.如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如果想
        * 访问外部类的成员，则可以使用（外部类名.this.成员）去访问
        * */

        // 匿名内部类的最佳实践
        // 当作实参直接传递，间接高效

        // 成员内部类的使用 MemberInnerClass01.java
        // 说明：成员内部类是定义在外部类的成员位置，并且没有static修饰
        /*
        * 1.可以直接访问外部类的所有成员，包含私有的
        * 2.可以添加任意访问修饰符（public、protected、默认、private)因为它的地位就是一个成员。
        * 3.作用域和外部类的其他成员一样，为整个类体
        * 比如前面案例，在外部类的成员方法中创建成员内部类对象，再调用方法
        * 4.成员内部类---访问---->外部类(比如：属性）访问方式：直接访问]（说明）
        * 5.外部类---访问------>内部类（说明）访问方式：创建对象，再访问
        * 6.外部其他类---访问---->成员内部类
        * 7.如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如
        * 果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问
        * */

        // 静态内部类的使用  StaticInnerClass01.java
        // 说明：静态内部类是定义在外部类的成员位置，并且有static修饰
        /*
        * 1.可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员
        * 2.可以添加任意访问修饰符（public、protected、默认、private)因为它的地位就是一个成员
        * 3.作用域：同其他的成员，为整个类体
        * 4.静态内部类---访问---->外部类(比如：静态属性）访问方式：直接访问所有静态成员]
        * 5.外部类---访问------>静态内部类访问方式：创建对象，再访问
        * 6.外部其他类--访问--静态内部类
        * 7.如果外部类和静态内部类的成员重名时，静态内部类访问的时，默认遵循就近原则，
        * 如果想访问外部类的成员，则可以使用外部类名.成员）去访问

        * */

        System.out.println("Hello world!");
    }
}