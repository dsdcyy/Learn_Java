public class Main {
    public static void main(String[] args) {
        // 断点调试
        // 一个实际需求
        /*
        * 1.在开发中，新手程序员在查找错误时，这是老程序员就会温馨提示，可以使用断点调试，
        * 一步步的看源码的执行过程，从而发现错误所在
        * 2.重要提示，在断点调试过程中，是运行状态，是以对象的运行类型来执行的
        * */

        // 断点调试介绍
        /*
        * 1.断点调试是指程序的某一行设置一个断点，调试时，程序会运行在这一行停住，
        * 然后你可以一步一步往下调试，调试过程中可以查看各个变量当前的值，
        * 出错的话，调试到出错的代码即显示错误，停下，进行分析从而找到这个Bug
        * 2.断点调试是程序员必须掌握的技能
        * 3.断点调试也可以帮助我们查看java底层源代码的执行过程，从而提交程序员的java水平
        * */
        System.out.println("Hello world!");

        // 断点调试的快捷键(idea)
        /*
        * F7(跳入) 跳入到方法内
        * F7 + shift + alt (跳入) 跳入到方法内(可以强制进入源码内)
        * F8(跳过) 逐行执行代码
        * shift + F8(跳出) 跳出方法
        * F9(resume) 执行到下一个断点
        * */
        // 断点调试
        // 案例1 Debug01.java F8逐行执行代码
        // 案例2 Debug02.java 查看数组越界异常
        // 案例3 Debug03.java 追原码，看看java设计者如何实现的
        // 案例4 Debug04.java 从断点处跳到下一个断点 ,执行过程中可以动态的打上断点

        // 练习  DebugTest01.java 追踪一下对象创建的过程
    }
}